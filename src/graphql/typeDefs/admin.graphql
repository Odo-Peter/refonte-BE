type Admin {
  _id: String
  name: String
  email: String
  contactNumber: String
  role: Role
  createdAt: Float
  updatedAt: Float
}

type User {
  _id: String
  name: String
  email: String
  contactNumber: String
  role: Role
  createdAt: Float
  updatedAt: Float
}

enum Role {
  ADMIN
  USER
}

type getAdminsResponse {
  response: Response
  admins: [Admin]
}

type getUsersResponse {
  response: Response
  users: [User]
}

type registerAdminResponse {
  response: Response
  admin: Admin
}

type LoginAdminResponse {
  response: Response
  token: String
  admin: Admin
}

# type updatePasswordResponse {
#   response: Response
# }

type deleteAdminResponse {
  response: Response
}

type Query {
  getAdmins: getAdminsResponse
  getAllUsers: getUsersResponse
  getAllCourses: getCoursesResponse
}

type Mutation {
  registerAdmin(name: String!, email: String!, password: String!, contactNumber: String): registerAdminResponse
  loginAdmin(email: String!, password: String!): LoginAdminResponse
  upgradeUser(email: String!): registerAdminResponse
  deleteAdmin(id: String!): deleteAdminResponse
  # updatePassword(currentPassword:String!, newPassword:String!): updatePasswordResponse
  # upgradeUserToAdmin(filter: object, options: object): Promise<IUser | null>;
}
